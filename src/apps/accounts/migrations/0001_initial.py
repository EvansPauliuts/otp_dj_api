# Generated by Django 5.0.2 on 2024-03-06 12:32

import uuid

import core.models
import django.utils.timezone
import localflavor.us.models
import django.core.validators
import django.db.models.deletion
import django.contrib.auth.models
import django.db.models.functions.text
from django.db import models, migrations
from django.conf import settings

import apps.accounts.utils
import apps.accounts.validators


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessUnit',
            fields=[
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    'updated',
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                ('status', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('entity_key', models.CharField(blank=True, max_length=10)),
                ('address_line_1', models.CharField(blank=True, max_length=255)),
                ('address_line_2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(max_length=5)),
                (
                    'zip_code',
                    localflavor.us.models.USZipCodeField(blank=True, max_length=10),
                ),
                ('contact_email', models.EmailField(blank=True, max_length=255)),
                (
                    'contact_phone',
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[apps.accounts.utils.PhoneValidator()],
                    ),
                ),
                ('description', models.TextField(blank=True)),
                ('paid_until', models.DateField(blank=True, null=True)),
                ('free_trial', models.BooleanField(default=False)),
                ('billing_info', models.JSONField(blank=True, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=255)),
                ('legal_name', models.CharField(blank=True, max_length=255)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('is_suspended', models.BooleanField(default=False)),
                ('suspension', models.TextField(blank=True)),
                (
                    'contract',
                    models.FileField(
                        blank=True,
                        upload_to=apps.accounts.utils.business_unit_contract_upload_to,
                        validators=[
                            django.core.validators.FileExtensionValidator(['pdf'])
                        ],
                    ),
                ),
            ],
            options={
                'db_table': 'business_unit',
                'db_table_comment': 'Stores information about the Business Unit.',
            },
        ),
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    'updated',
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                ('name', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'a_group',
                'db_table_comment': 'Store the groups that a user belongs to.',
            },
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='Depot',
            fields=[
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, max_length=255)),
            ],
            options={
                'db_table': 'depot',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='JobTitle',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    'updated',
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    'status',
                    core.models.ChoiceField(
                        choices=[('A', 'Active'), ('I', 'Inactive')],
                        default='A',
                        max_length=1,
                    ),
                ),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                (
                    'job_function',
                    core.models.ChoiceField(
                        choices=[
                            ('MANAGER', 'Manager'),
                            ('MANAGEMENT_TRAINEE', 'Management Trainee'),
                            ('SUPERVISOR', 'Supervisor'),
                            ('DISPATCHER', 'Dispatcher'),
                            ('BILLING', 'Billing'),
                            ('FINANCE', 'Finance'),
                            ('SAFETY', 'Safety'),
                            ('SYS_ADMIN', 'System Administrator'),
                            ('TEST', 'Test Job Function'),
                        ],
                        max_length=18,
                    ),
                ),
            ],
            options={
                'db_table': 'job_title',
                'db_table_comment': 'Stores the job title information related '
                'to users.',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    'updated',
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                ('name', models.CharField(max_length=255)),
                ('scac_code', models.CharField(max_length=4)),
                ('dot_number', models.PositiveIntegerField(blank=True, null=True)),
                ('address_line_1', models.CharField(max_length=255)),
                ('address_line_2', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=5)),
                ('zip_code', localflavor.us.models.USZipCodeField(max_length=10)),
                (
                    'phone_number',
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[apps.accounts.utils.PhoneValidator()],
                    ),
                ),
                ('website', models.URLField(blank=True)),
                (
                    'org_type',
                    models.CharField(
                        choices=[
                            ('ASSET', 'Asset'),
                            ('BROKERAGE', 'Brokerage'),
                            ('BOTH', 'Both'),
                        ],
                        default='ASSET',
                        max_length=10,
                    ),
                ),
                (
                    'timezone',
                    models.CharField(
                        default='America/New_York',
                        max_length=255,
                        validators=[apps.accounts.validators.validate_org_timezone],
                    ),
                ),
                (
                    'language',
                    models.CharField(
                        choices=[('en', 'English'), ('es', 'Spanish')],
                        default='en',
                        max_length=2,
                    ),
                ),
                ('currency', models.CharField(default='USD', max_length=255)),
                ('date_format', models.CharField(default='MM/DD/YYYY', max_length=255)),
                ('time_format', models.CharField(default='HH:mm', max_length=255)),
                (
                    'logo',
                    models.ImageField(
                        blank=True, null=True, upload_to='organizations/logo/'
                    ),
                ),
                ('token_expiration_days', models.PositiveIntegerField(default=30)),
            ],
            options={
                'db_table': 'organization',
                'db_table_comment': 'Stores information about the Organization.',
                'permissions': (
                    ('view_systemhealth', 'Can View System Health'),
                    ('view_activesessions', 'Can View Active Sessions'),
                    ('view_threads', 'Can View Active Threads'),
                    ('view_activetriggers', 'Can View Active Triggers'),
                    ('view_cachemanager', 'Can View Cache Manager'),
                    ('view_admin_dashboard', 'Can View Admin Dashboard'),
                ),
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('expires', models.DateTimeField(blank=True, null=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                (
                    'key',
                    models.CharField(
                        max_length=40,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(40)],
                    ),
                ),
            ],
            options={
                'db_table': 'auth_token',
                'db_table_comment': 'Stores the token for a user.',
            },
        ),
        migrations.CreateModel(
            name='UserFavorite',
            fields=[
                (
                    'updated',
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('page', models.CharField(max_length=255, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'user_favorite',
                'db_table_comment': 'Stores the pages favorited by a user.',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    'updated',
                    models.DateTimeField(auto_now=True, db_index=True, null=True),
                ),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                (
                    'profile_picture',
                    models.ImageField(
                        blank=True, null=True, upload_to='user_profiles/pictures/'
                    ),
                ),
                (
                    'thumbnail',
                    models.ImageField(
                        blank=True, null=True, upload_to='user_profiles/thumbnails/'
                    ),
                ),
                ('address_line_1', models.CharField(max_length=100)),
                ('address_line_2', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=5)),
                ('zip_code', localflavor.us.models.USZipCodeField(max_length=10)),
                (
                    'phone_number',
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[apps.accounts.utils.PhoneValidator()],
                    ),
                ),
                ('is_phone_verified', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user_profile',
                'db_table_comment': 'Stores additional information for a related user',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                (
                    'last_login',
                    models.DateTimeField(
                        blank=True, null=True, verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has '
                        'all permissions without '
                        'explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'id',
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ('is_active', models.BooleanField(default=True)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_dev_staff', models.BooleanField(default=False)),
                (
                    'date_joined',
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ('online', models.BooleanField(default=False)),
                (
                    'timezone',
                    core.models.ChoiceField(
                        choices=[
                            ('America/Los_Angeles', 'Pacific'),
                            ('America/Denver', 'Mountain'),
                            ('America/Chicago', 'Central'),
                            ('America/New_York', 'Eastern'),
                        ],
                        default='America/New_York',
                        max_length=19,
                        validators=[apps.accounts.validators.validate_org_timezone],
                    ),
                ),
                ('session_key', models.CharField(blank=True, max_length=40, null=True)),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'db_table': 'user',
                'permissions': (('accounts.view_all_users', 'Can view all users'),),
            },
        ),
        migrations.AddConstraint(
            model_name='businessunit',
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower('entity_key'),
                name='unique_business_unit_entity_key',
            ),
        ),
        migrations.AddField(
            model_name='user',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='users',
                related_query_name='user',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='customgroup',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='groups',
                related_query_name='group',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='customgroup',
            name='permissions',
            field=models.ManyToManyField(blank=True, to='auth.permission'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(
                blank=True,
                related_name='user_set',
                related_query_name='user',
                to='accounts.customgroup',
            ),
        ),
        migrations.AddField(
            model_name='department',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='departments',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='users',
                related_query_name='user',
                to='accounts.department',
            ),
        ),
        migrations.AddField(
            model_name='depot',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='depots',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='department',
            name='depot',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='departments',
                related_query_name='department',
                to='accounts.depot',
            ),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)ss',
                related_query_name='%(class)s',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='organization',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='organizations',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='jobtitle',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)ss',
                related_query_name='%(class)s',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='depot',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='depots',
                related_query_name='depot',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='department',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='departments',
                related_query_name='department',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='customgroup',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='groups',
                related_query_name='group',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='user',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='users',
                related_query_name='user',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='token',
            name='user',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='tokens',
                related_query_name='token',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='userfavorite',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)ss',
                related_query_name='%(class)s',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='userfavorite',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)ss',
                related_query_name='%(class)s',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='userfavorite',
            name='user',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='favorites',
                related_query_name='favorite',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='business_unit',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)ss',
                related_query_name='%(class)s',
                to='accounts.businessunit',
            ),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='job_title',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name='profile',
                related_query_name='profiles',
                to='accounts.jobtitle',
            ),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='organization',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)ss',
                related_query_name='%(class)s',
                to='accounts.organization',
            ),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user',
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='profile',
                related_query_name='profiles',
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddConstraint(
            model_name='jobtitle',
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower('name'),
                models.F('organization'),
                name='unique_job_title_organization',
            ),
        ),
        migrations.AddConstraint(
            model_name='depot',
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower('name'),
                models.F('organization'),
                name='unique_depot_name_organization',
            ),
        ),
        migrations.AddConstraint(
            model_name='customgroup',
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower('name'),
                models.F('organization'),
                name='unique_group_organization',
            ),
        ),
    ]
